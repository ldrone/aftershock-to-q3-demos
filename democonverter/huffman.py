from bitarray import bitarray, decodetree, util


class Huffman:
    """
    qcommon/huffman_static.c
    Encode numbers and 256 ASCII symbols with Huffman coding.
    """

    _MAX_CODE_LENGTH = 11

    _q3_encoder_table = [
        34,
        437,
        1159,
        1735,
        2584,
        280,
        263,
        1014,
        341,
        839,
        1687,
        183,
        311,
        726,
        920,
        2761,
        599,
        1417,
        7945,
        8073,
        7642,
        16186,
        8890,
        12858,
        3913,
        6362,
        2746,
        13882,
        7866,
        1080,
        1273,
        3400,
        886,
        3386,
        1097,
        11482,
        15450,
        16282,
        12506,
        15578,
        2377,
        6858,
        826,
        330,
        10010,
        12042,
        8009,
        1928,
        631,
        3128,
        3832,
        6521,
        1336,
        2840,
        217,
        5657,
        121,
        3865,
        6553,
        6426,
        4666,
        3017,
        5193,
        7994,
        3320,
        1287,
        1991,
        71,
        536,
        1304,
        2057,
        1801,
        5081,
        1594,
        11642,
        14106,
        6617,
        10938,
        7290,
        13114,
        4809,
        2522,
        5818,
        14010,
        7482,
        5914,
        7738,
        9018,
        3450,
        11450,
        5897,
        2697,
        3193,
        4185,
        3769,
        3464,
        3897,
        968,
        6841,
        6393,
        2425,
        775,
        1048,
        5369,
        454,
        648,
        3033,
        3145,
        2440,
        2297,
        200,
        2872,
        2136,
        2248,
        1144,
        1944,
        1431,
        1031,
        376,
        408,
        1208,
        3608,
        2616,
        1848,
        1784,
        1671,
        135,
        1623,
        502,
        663,
        1223,
        2007,
        248,
        2104,
        24,
        2168,
        1656,
        3704,
        1400,
        1864,
        7353,
        7241,
        2073,
        1241,
        4889,
        5690,
        6153,
        15738,
        698,
        5210,
        1722,
        986,
        12986,
        3994,
        3642,
        9306,
        4794,
        794,
        16058,
        7066,
        4425,
        8090,
        4922,
        714,
        11738,
        7194,
        12762,
        7450,
        5001,
        1562,
        11834,
        13402,
        9914,
        3290,
        3258,
        5338,
        905,
        15386,
        9178,
        15306,
        3162,
        15050,
        15930,
        10650,
        15674,
        8522,
        8250,
        7114,
        10714,
        14362,
        9786,
        2266,
        1352,
        4153,
        1496,
        518,
        151,
        15482,
        12410,
        2952,
        7961,
        8906,
        1114,
        58,
        4570,
        7258,
        13530,
        474,
        9,
        15258,
        3546,
        6170,
        4314,
        2970,
        7386,
        14666,
        7130,
        6474,
        14554,
        5514,
        15322,
        3098,
        15834,
        3978,
        3353,
        2329,
        2458,
        12170,
        570,
        1818,
        11578,
        14618,
        1175,
        8986,
        4218,
        9754,
        8762,
        392,
        8282,
        11290,
        7546,
        3850,
        11354,
        12298,
        15642,
        14986,
        8666,
        20491,
        90,
        13706,
        12186,
        6794,
        11162,
        10458,
        759,
        582,
    ]

    _encoder_table = {}
    _decoder_tree = None

    def __init__(self):
        for symbol, code in enumerate(self._q3_encoder_table):
            code = util.int2ba(code >> 4, code % 16)
            code.reverse()
            self._encoder_table[symbol] = code
        self._decoder_tree = decodetree(self._encoder_table)

    def encode(self, symbol):
        if isinstance(symbol, bitarray):
            symbol = util.ba2int(symbol)
        try:
            return self._encoder_table[symbol]
        except KeyError as e:
            raise ValueError('Key not found:', e)

    def decode(self, code):
        try:
            symbol = next(code[: self._MAX_CODE_LENGTH].iterdecode(self._decoder_tree))
            return symbol, len(self.encode(symbol))
        except ValueError as e:
            if util.ba2int(code) == 256:
                return 0, 11
            raise ValueError('Decoding failed:', e)
        except StopIteration:
            return 0, 11

    def __str__(self):
        table = '\nsym\tasc\tcode\tcode_binary\n'
        for symbol, code in self._encoder_table.items():
            # in game first 32 symbols are drawn
            symbol_ascii = chr(symbol) if 32 < symbol < 127 else '.'
            code_binary = code.to01()
            code.reverse()
            table += '{0:>3d}\t{1:>3s}\t{2:>4d}\t{3:<11s}\n'.format(
                symbol, symbol_ascii, util.ba2int(code), code_binary
            )
        return table
